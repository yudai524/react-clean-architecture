import { inject, injectable } from 'inversify'
import {
  IAppErrorFactory,
  IUseCaseOutputFactory,
  I{{pascalCase name}}UseCase,
  {{pascalCase name}}UseCaseInput,
  {{pascalCase name}}UseCaseOutput,
  {{pascalCase name}}UseCaseOutputBase,
} from '@/types'
import symbols from '@/symbols'

@injectable()
export default class {{pascalCase name}}Interactor implements I{{pascalCase name}}UseCase {
  // @inject(symbols.IAwesomeService) private awesomeService: IAwesomeService

  @inject(symbols.IAppErrorFactory) private errorFactory: IAppErrorFactory

  @inject(symbols.IUseCaseOutputFactory) private useCaseOutputFactory: IUseCaseOutputFactory<{{pascalCase name}}UseCaseOutputBase>

  async handle(input: {{pascalCase name}}UseCaseInput): Promise<{{pascalCase name}}UseCaseOutput> {
    const output = this.useCaseOutputFactory.create({
      defaultValue: {
        // TODO: Define your default output.
      }
    })
    try {
      // TODO: Write your business logic.
      // const { items, hasNextPage } = await this.awesomeService.fetchAwesomeItems(input)
      // output.items = items
      // output.hasNextPage = hasNextPage
    } catch (e) {
      output.error = this.errorFactory.create({
        originalInstance: e as Error,
      })
    }

    return output
  }
}
